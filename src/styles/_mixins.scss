@use 'variables' as *;

// Media query mixin
@mixin respond-to($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    @media (min-width: map-get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

// Typography mixins
@mixin typography($size, $weight: $font-weight-regular, $line-height: $line-height-base) {
  font-size: $size;
  font-weight: $weight;
  line-height: $line-height;
}

@mixin heading($level: 1) {
  $sizes: (
    1: 2.5rem,
    2: 2rem,
    3: 1.75rem,
    4: 1.5rem,
    5: 1.25rem,
    6: 1rem
  );
  
  @include typography(
    map-get($sizes, $level),
    $font-weight-bold,
    $line-height-heading
  );
}

// Layout mixins
@mixin container($max-width: 1200px) {
  width: 100%;
  max-width: $max-width;
  margin-left: auto;
  margin-right: auto;
  padding-left: map-get($spacing-scale, 'md');
  padding-right: map-get($spacing-scale, 'md');
}

@mixin flex($direction: row, $justify: flex-start, $align: stretch) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
}

@mixin grid($columns: 1, $gap: map-get($spacing-scale, 'md')) {
  display: grid;
  grid-template-columns: repeat($columns, 1fr);
  gap: $gap;
}

// Utility mixins
@mixin color($color-name) {
  @if map-has-key($colors, $color-name) {
    color: map-get($colors, $color-name);
  } @else {
    @warn "Unknown color: #{$color-name}";
  }
}

@mixin background-color($color-name) {
  @if map-has-key($colors, $color-name) {
    background-color: map-get($colors, $color-name);
  } @else {
    @warn "Unknown color: #{$color-name}";
  }
}

@mixin spacing($property, $size) {
  @if map-has-key($spacing-scale, $size) {
    #{$property}: map-get($spacing-scale, $size);
  } @else {
    @warn "Unknown spacing size: #{$size}";
  }
} 